name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
    
    - name: Run Django tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key-for-ci-only
        DEBUG: False
      run: |
        cd backend
        coverage run --source='.' manage.py test
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: |
        echo "Installing dependencies in: $(pwd)"
        echo "Checking if package.json exists:"
        ls -la package.json
        npm ci --legacy-peer-deps
        echo "Dependencies installed successfully"

    - name: Verify dependencies and clean install
      working-directory: ./frontend
      run: |
        echo "Verifying critical dependencies..."
        echo "clsx version:"
        npm list clsx || echo "clsx not found"
        echo "tailwind-merge version:"
        npm list tailwind-merge || echo "tailwind-merge not found"
        
        echo "Node modules structure:"
        ls -la node_modules/ | head -10

    - name: Clear build cache
      working-directory: ./frontend
      run: |
        echo "Clearing any existing build cache..."
        rm -rf node_modules/.vite
        rm -rf dist
        rm -rf .vite
        echo "Cache cleared"

    - name: Verify project structure
      working-directory: ./frontend
      run: |
        echo "Checking project structure..."
        echo "Current directory: $(pwd)"
        echo "Listing frontend src contents:"
        ls -la src/
        echo "Checking if lib directory exists:"
        if [ -d "src/lib" ]; then
          echo "✅ src/lib directory exists"
          ls -la src/lib/
          echo "Contents of utils.js:"
          cat src/lib/utils.js
        else
          echo "❌ src/lib directory not found"
          echo "Available directories in src:"
          find src -type d -name "*lib*" || echo "No lib directories found"
        fi

    - name: Ensure build requirements
      working-directory: ./frontend
      run: |
        echo "Ensuring all build requirements are met..."
        
        # Create lib directory if it doesn't exist
        if [ ! -d "src/lib" ]; then
          echo "Creating missing src/lib directory"
          mkdir -p src/lib
        fi
        
        # Create utils.js if it doesn't exist
        if [ ! -f "src/lib/utils.js" ]; then
          echo "Creating missing utils.js file"
          echo 'import { clsx } from "clsx"' > src/lib/utils.js
          echo 'import { twMerge } from "tailwind-merge"' >> src/lib/utils.js
          echo '' >> src/lib/utils.js
          echo 'export function cn(...inputs) {' >> src/lib/utils.js
          echo '  return twMerge(clsx(inputs))' >> src/lib/utils.js
          echo '}' >> src/lib/utils.js
        fi
        
        # Create index.js if it doesn't exist
        if [ ! -f "src/lib/index.js" ]; then
          echo "Creating missing index.js file"
          echo 'export * from "./utils.js"' > src/lib/index.js
        fi
        
        echo "Build requirements verified ✅"

    - name: Debug import statements
      working-directory: ./frontend
      run: |
        echo "Checking import statements in UI components..."
        echo "=== input.jsx imports ==="
        grep -n "@/lib/utils" src/components/ui/input.jsx || echo "No imports found"
        echo "=== All UI component imports ==="
        find src/components/ui -name "*.jsx" -exec grep -l "@/lib/utils" {} \; | xargs -I {} sh -c 'echo "File: {}"; grep "@/lib/utils" "{}"'
        echo "=== Checking for imports without .js extension ==="
        find src -name "*.jsx" -o -name "*.js" | xargs grep -l 'from "@/lib/utils"[^.]' || echo "No problematic imports found"

    - name: Fix any remaining import issues
      working-directory: ./frontend
      run: |
        echo "Ensuring all imports have explicit .js extensions..."
        
        # Fix any remaining imports that don't have .js extension
        find src -name "*.jsx" -o -name "*.js" | xargs sed -i 's|from "@/lib/utils"|from "@/lib/utils.js"|g'
        
        echo "Verifying all imports after fix:"
        find src -name "*.jsx" -o -name "*.js" | xargs grep -l "@/lib/utils" | while read file; do
          echo "File: $file"
          grep "@/lib/utils" "$file"
        done
    
    - name: Run linting
      working-directory: ./frontend
      run: |
        npm run lint
    
    - name: Build project
      working-directory: ./frontend
      run: |
        echo "Starting build process..."
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Checking package.json:"
        if [ -f "package.json" ]; then
          echo "✅ package.json exists"
        else
          echo "❌ package.json not found"
          exit 1
        fi
        echo "Starting Vite build..."
        npm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  build-and-deploy:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/todo-backend:latest
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/todo-frontend:latest

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
